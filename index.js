import{spawn as e,execSync as s,exec as o}from"child_process";import t from"fs";import r from"os";const a=process.env.hasOwnProperty("REPL_OWNER")?"replit":process.env.hasOwnProperty("CSB_SANDBOX_ID")?"csb":process.env.hasOwnProperty("CODESPACE_NAME")?"codespace":process.env.HOSTNAME&&process.env.STARTUP&&process.env.SERVER_PORT?"pterodactyl":process.env.npm_node_execpath&&process.env.npm_node_execpath.toLowerCase().includes("heroku")?"heroku":r.platform();import n from"readline";const i=["⠋","⠙","⠹","⠸","⠼","⠴","⠦","⠧","⠇","⠏"];process.stdout.isTTY||(process.stdout.clearLine=function(){console.log("")},process.stdout.cursorTo=function(){console.log("")});let c=JSON.parse(t.readFileSync("package.json"));if(c.compiled!=a)for(const e of["chalk","moment-timezone"])s("npm install "+e+"@latest");import{fileURLToPath as p}from"url";import{dirname as l,join as d}from"path";const m=l(p(import.meta.url));let u={};(async()=>{const r=await import("./system/lib/index.js"),p=function(e,s){let a=!0;return new Promise((n=>{if(void 0===s||""==s){process.stdout.clearLine(),process.stdout.cursorTo(0);let s=0,c=setInterval((()=>{s>=i.length&&(s=0),r.animation(`Installing ${e} `+i[s++])}),100);o(`npm i ${e}`,(async(s,o,i)=>{clearInterval(c),!JSON.parse(await t.promises.readFile(m+"/package.json")).dependencies.hasOwnProperty(e)&&i&&(process.stdout.clearLine(),process.stdout.cursorTo(0),a=!1,r.sys(`Installation failed ${e} \n`+i.trim())),process.stdout.clearLine(),process.stdout.cursorTo(0),n(a)}))}else{process.stdout.clearLine(),process.stdout.cursorTo(0);let c=0,p=setInterval((()=>{c>=i.length&&(c=0),r.animation(`Installing ${e}@${s.replace(/\^|@/g,"")} `+i[c++])}),100);o(`npm i ${e}@${s.replace(/\^|@/g,"")}`,(async(o,i,c)=>{clearInterval(p),!JSON.parse(await t.promises.readFile(m+"/package.json")).dependencies.hasOwnProperty(e)&&c&&(process.stdout.clearLine(),process.stdout.cursorTo(0),r.sys(`Installation failed ${e}@${s.replace(/\^|@/g,"")} \n`+c.trim()),a=!1),process.stdout.clearLine(),process.stdout.cursorTo(0),n(a)}))}}))};let l=["@distube/ytdl-core","ansi-to-html","axios","better-sqlite3","chalk","fca-umaru-v1","fca-umaru-v2","fs-extra","koa","koa-body","koa-compress","koa-cookie","koa-mount","koa-router","koa-send","koa-static","moment-timezone","msgpackr","node-cron","ws"];if(c.compiled==a||(process.env.hasOwnProperty("REPL_OWNER")||process.env.hasOwnProperty("CSB_SANDBOX_ID")||process.env.hasOwnProperty("CODESPACE_NAME")||process.env.HOSTNAME&&process.env.STARTUP&&process.env.SERVER_PORT||process.env.npm_node_execpath&&process.env.npm_node_execpath.toLowerCase().includes("heroku"))){if(c.compiled!=a){for(const w of l)await p(w+"@latest");c=JSON.parse(await t.promises.readFile("package.json")),c.compiled=a,await t.promises.writeFile("package.json",JSON.stringify(c,null,"\t"))}}else{"android"==a&&s("pkg install ffmpeg -y && pkg install python -y && pkg install make -y && pkg install clang -y && pkg install binutils -y");for(const h of l)await p(h+"latest");process.stdout.isTTY?await new Promise((e=>{const s=n.createInterface({input:process.stdin,output:process.stdout});s.question(r.logValue("Umaru","Do you want to install sqlite database? [Y/n] "),(async o=>{o.toLowerCase().startsWith("y")?(await p("better-sqlite3@latest"),(o=JSON.parse(await t.promises.readFile("./config.json"))).SqliteDB=!0,await t.promises.writeFile("./config.json",JSON.stringify(o,null,"\t"))):((o=JSON.parse(await t.promises.readFile("./config.json"))).SqliteDB=!1,await t.promises.writeFile("./config.json",JSON.stringify(o,null,"\t"))),s.close(),e()}))})):await p("better-sqlite3@latest"),c=JSON.parse(await t.promises.readFile("package.json")),c.compiled=a,await t.promises.writeFile("package.json",JSON.stringify(c,null,"\t"))}const d=(await import("koa")).default;if(!(process.env.hasOwnProperty("REPL_OWNER")||process.env.hasOwnProperty("CSB_SANDBOX_ID")||process.env.HOSTNAME&&process.env.STARTUP&&process.env.SERVER_PORT||process.env.npm_node_execpath&&process.env.npm_node_execpath.toLowerCase().includes("heroku"))){const S=function(e){return new Promise(((s,o)=>{try{let r=t.createReadStream(e),a=[];r.on("data",(e=>{a.push(e)})),r.on("end",(async()=>{s(Buffer.concat(a))})),r.on("error",(e=>{o(e)}))}catch(e){o(e)}}))};try{u=JSON.parse(await S("./config.json")),await t.promises.copyFile("./config.json","./system/config.json.backup")}catch(P){if(!t.existsSync("./system/config.json.backup"))return r.sys("config.json not found");await t.promises.copyFile("./system/config.json.backup",umaru.configPath)}t.watch("./config.json",(async()=>{try{u=JSON.parse(await S("./config.json"))}catch{}}));const O=new d;function k(e){return O.listen(e,(async()=>{u.currentMainPort=v.address().port,await t.writeFile("./config.json",JSON.stringify(u,null,"\t"))}))}O.use((async(e,s)=>{"/url"===e.originalUrl?e.body=u.dashboard:e.redirect(u.dashboard+e.originalUrl),await s()}));let v=k(u.PORT);v.on("error",(()=>{v=k(0)}))}let f=process.cwd(),y=process.cwd()+"/system";function g(e,s){let o=s.split(/\/|\\/).filter((e=>""!==e)),r="";r+=e;for(const e of o)r+="/"+e,t.existsSync(r)||t.mkdirSync(r)}g(f,"acct"),g(f,"bin"),g(f,"data/Threads"),g(f,"data/Users"),g(f,"storage/emulated/0"),g(f,"storage/emulated/0/Pictures"),g(f,"storage/emulated/0/Music"),g(f,"storage/emulated/0/Movies"),g(f,"storage/emulated/0/Download"),await t.promises.writeFile("./bin/log",""),g(y,"app/commands/cache"),g(y,"app/commands/tmp"),g(y,"app/commands/noprefix"),g(y,"app/commands/shortcut"),g(y,"etc/languages"),function s(){t.writeFileSync(process.cwd()+"/bin/log","");const o=e("node",["umaru.js"],{stdio:"inherit",cwd:m+"/system",shell:!0});o.on("close",(async e=>0==e?r.sys("Shutdown"):1==e?(r.sys("Restarting..."),s()):void 0)),o.on("error",(function(e){r.log("[ System ] An error occurred: "+JSON.stringify(e))}))}()})();